name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push event but only for the main branch
  #push:
  #  branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: jsquelch
    
      # Checks-out JFFT a needed depenancy
      - name: Checkout FFT repo
        uses: actions/checkout@v2
        with:
          repository: jontio/JFFT
          path: JFFT
          
      # Checks-out libopusenc a needed depenancy
      - name: Checkout libopusenc repo
        uses: actions/checkout@v2
        with:
          repository: xiph/libopusenc
          path: libopusenc

      # Setup apt dependencies using the runners shell
      - name: Setup apt dependencies
        run: |
          sudo apt-get install qt5-default cpputest build-essential qtmultimedia5-dev automake libtool libopus-dev libogg-dev libqt5multimedia5-plugins checkinstall -y
          
      # build package and install libopusenc-dev
      - name: Build package and install libopusenc-dev
        run: |
          cd libopusenc
          git fetch --prune --unshallow --tags
          git status > /dev/null 2>&1
          LIBOPUSENC_PACKAGE_VERSION=$(git describe --tags --match 'v*' --dirty 2> /dev/null | tr -d v)
          echo 'LIBOPUSENC_PACKAGE_VERSION='$LIBOPUSENC_PACKAGE_VERSION
          ./autogen.sh
          ./configure
          make
          sudo checkinstall \
            --pkgsource="https://github.com/xiph/libopusenc" \
            --pkglicense="BSD" \
            --maintainer="${{ secrets.EMAIL }}" \
            --pkgversion="$LIBOPUSENC_PACKAGE_VERSION" \
            --pkgrelease="1" \
            --pkgname=libopusenc-dev \
            --provides=libopusenc-dev \
            --summary="Library for encoding .opus audio files and live streams." \
            --requires="libopus-dev \(\>=1.3\), libogg-dev \(\>=1.3\)" \
            -y
          sudo ldconfig
          echo finished installing libopusenc-dev.
          
      # Run unit tests
      - name: Run unit tests
        run: |
          cd jsquelch
          qmake CONFIG+=CI
          make
          ./jsquelch -v
          echo finished testing.
          
      # Build application
      - name: Build application
        run: |
          cd jsquelch
          qmake CONFIG-=CI
          make
          echo finished build.
    
      # Package application starting with v1.0 
      - name: Package application
        run: |
          cd jsquelch
          git fetch --prune --unshallow --tags
          echo '#!/bin/bash' > get_pkg_version.sh
          echo "INITIAL_PKGVERSION='v1.0'" >> get_pkg_version.sh
          echo 'git status > /dev/null 2>&1' >> get_pkg_version.sh
          echo 'last_release_version=$(git describe --tags --match 'v*' --dirty 2>/dev/null)' >> get_pkg_version.sh
          echo 'found_last_release_version=$?' >> get_pkg_version.sh
          echo 'if [ $found_last_release_version -eq 0 ]' >> get_pkg_version.sh
          echo 'then' >> get_pkg_version.sh
          echo '    pkgversion=$last_release_version' >> get_pkg_version.sh
          echo 'else' >> get_pkg_version.sh
          echo '    pkgversion=$INITIAL_PKGVERSION-g$(git rev-parse HEAD | cut -c 1-8)' >> get_pkg_version.sh
          echo 'fi' >> get_pkg_version.sh
          echo 'echo $pkgversion' >> get_pkg_version.sh
          chmod +x get_pkg_version.sh
          JSQUELCH_PACKAGE_VERSION=$(./get_pkg_version.sh | tr -d v)
          echo 'JSQUELCH_PACKAGE_VERSION='$JSQUELCH_PACKAGE_VERSION
          echo 'Maintainer: ${{ secrets.EMAIL }}' >> control
          echo 'Version: '$JSQUELCH_PACKAGE_VERSION-1'' >> control
          echo "" >> control
          mkdir jsquelch_$JSQUELCH_PACKAGE_VERSION-1
          mkdir -p jsquelch_$JSQUELCH_PACKAGE_VERSION-1/usr/local/bin
          cp jsquelch jsquelch_$JSQUELCH_PACKAGE_VERSION-1/usr/local/bin
          mkdir -p jsquelch_$JSQUELCH_PACKAGE_VERSION-1/DEBIAN
          cp control jsquelch_$JSQUELCH_PACKAGE_VERSION-1/DEBIAN
          dpkg-deb --build jsquelch_$JSQUELCH_PACKAGE_VERSION-1
          
      # Compress packages
      - name: Compress packages with extras
        run: |
          cd jsquelch
          JSQUELCH_PACKAGE_VERSION=$(./get_pkg_version.sh | tr -d v)
          cd ..
          LIBOPUSENC_PACKAGE_VERSION=$(awk '/PACKAGE_VERSION/{print $NF}' libopusenc/config.h | tr -d \' | tr -d \" | tr -d v)
          mkdir tmp
          mkdir tmp/jsquelch
          cp jsquelch/jsquelch_$JSQUELCH_PACKAGE_VERSION-1.deb tmp/jsquelch/
          cp libopusenc/libopusenc-dev_$LIBOPUSENC_PACKAGE_VERSION-1_amd64.deb tmp/jsquelch/
          cd tmp/jsquelch
          echo '#!/bin/bash' > install.sh
          echo 'sudo apt install ./jsquelch_'$JSQUELCH_PACKAGE_VERSION'-1.deb ./libopusenc-dev_'$LIBOPUSENC_PACKAGE_VERSION'-1_amd64.deb -y' >> install.sh
          echo '#!/bin/bash' > uninstall.sh
          echo 'sudo apt remove jsquelch libopusenc-dev -y' >> uninstall.sh
          chmod +x install.sh
          chmod +x uninstall.sh
          echo 'Version: v'$JSQUELCH_PACKAGE_VERSION' Build Date:'$(date)
          echo 'This has been built and packaged by Github actions.' >> readme
          echo 'these packages are for debian based Linux and are executable code.' >> readme
          echo 'these packages have only been tested on kubuntu 20.04 and ubuntu 20.04' >> readme
          echo '' >> readme
          echo 'install and uninstall are examples as how to install and uninstall.' >> readme
          echo 'if you want to use them then type "./install.sh" in this folder to install jsquelch.' >> readme
          echo '' >> readme
          echo 'once installed type "jsquelch" to run jsquelch' >> readme
          cd ..
          tar -czvf jsquelch.tar.gz jsquelch
          
      # upload artifact    
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jsquelch_deb_binaries
          path: |
            tmp/jsquelch.tar.gz
            
      # Create a release      
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            tmp/jsquelch.tar.gz
